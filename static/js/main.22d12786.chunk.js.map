{"version":3,"sources":["components/UrlBar.js","components/LogView.js","components/SystemInfo.js","util/zip.js","components/BundleView.js","components/NothingLoaded.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","url","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","urlIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","width","inputInput","paddingLeft","transition","transitions","create","UrlBar","props","classes","useState","setUrl","className","InputBase","placeholder","root","input","onChange","event","target","value","onKeyDown","key","handleUrlChange","defaultValue","log","overflow","linenumber","text","secondary","line","LogView","lines","content","split","itemCount","length","itemSize","index","style","SystemInfo","info","filter","l","trim","map","console","loadRemote","a","fetch","mode","response","ok","Error","status","blob","JSZip","loadAsync","zip","filename","file","format","async","utils","loadRemoteZip","containsFile","getFileContents","BundleView","loading","setLoading","logsLoading","setLogsLoading","systemInfo","setSystemInfo","logs","setLogs","useEffect","match","replace","corsRewrite","ziputils","then","files","promises","contents","forEach","promise","push","Promise","allSettled","result","catch","SystemInfoBlock","CircularProgress","Accordion","defaultExpanded","AccordionSummary","expandIcon","aria-controls","id","Typography","heading","AccordionDetails","LogBlock","language","NothingLoaded","offset","mixins","toolbar","container","paddingTop","paddingBottom","App","prefersDarkMode","useMediaQuery","darkMode","setDarkMode","pallet","darkModeTheme","createMuiTheme","type","MainView","ThemeProvider","CssBaseline","AppBar","appBar","Toolbar","variant","noWrap","newUrl","Switch","checked","Container","maxWidth","search","window","location","URLSearchParams","get","ReactDOM","render","document","querySelector"],"mappings":"4TAQMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJC,SAAU,GAEZC,IAAK,CACHC,SAAU,WACVC,aAAcL,EAAMM,MAAMD,aAC1BE,gBAAiBC,YAAKR,EAAMS,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,gBAAiBC,YAAKR,EAAMS,QAAQC,OAAOC,MAAO,MAEpDC,YAAaZ,EAAMa,QAAQ,GAC3BC,WAAYd,EAAMa,QAAQ,GAC1BX,SAAU,GAEZa,QAAS,CACPC,QAAShB,EAAMa,QAAQ,EAAG,GAC1BI,OAAQ,OACRb,SAAU,WACVc,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTC,MAAO,UACPC,MAAO,QAETC,WAAY,CACVT,QAAShB,EAAMa,QAAQ,EAAG,EAAG,EAAG,GAChCa,YAAY,cAAD,OAAgB1B,EAAMa,QAAQ,GAA9B,OACXc,WAAY3B,EAAM4B,YAAYC,OAAO,SACrCL,MAAO,YAKE,SAASM,EAAOC,GAC3B,IAAMC,EAAUlC,IADkB,EAGZmC,mBAASF,EAAM5B,KAHH,mBAG3BA,EAH2B,KAGtB+B,EAHsB,KAelC,OACI,sBAAKC,UAAWH,EAAQ7B,IAAxB,UACA,qBAAKgC,UAAWH,EAAQjB,QAAxB,SACE,cAAC,IAAD,MAEF,cAACqB,EAAA,EAAD,CACEC,YAAY,SACZL,QAAS,CACPM,KAAMN,EAAQV,UACdiB,MAAOP,EAAQP,YAEjBe,SArBe,SAACC,GAClBP,EAAOO,EAAMC,OAAOC,QAqBlBC,UAlBgB,SAACH,GACD,UAAdA,EAAMI,KACNd,EAAMe,gBAAgB3C,IAiBxB4C,aAAchB,EAAM5B,S,iECrExBL,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgD,IAAK,CACD9C,SAAU,EACV+C,SAAU,OACVjC,QAAS,EACT,cAAe,kDAEnBkC,WAAY,CACR/B,QAAS,eACTK,MAAO,MACP,aAAc,QACd,eAAgB,MAChB,MAASxB,EAAMS,QAAQ0C,KAAKC,WAEhCC,KAAM,OAKK,SAASC,EAAQvB,GAC5B,IAAMC,EAAUlC,IAEVyD,EAAQxB,EAAMyB,QAAQC,MAAM,MAMlC,OACI,sBAAMtB,UAAWH,EAAQgB,IAAzB,SACI,8BACI,cAAC,IAAD,CACI/B,OAAQ,IACRyC,UAAWH,EAAMI,OACjBC,SAAU,GAHd,SAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACT,uBAAMA,MAAOA,EAAb,UAAoB,sBAAM3B,UAAWH,EAAQkB,WAAzB,SAAsCW,EAAM,IAAS,sBAAM1B,UAAWH,EAAQqB,KAAzB,SAAgCE,EAAMM,eC3BxG,SAASE,EAAWhC,GAC/B,IAAMwB,EAAQxB,EAAMiC,KAAKP,MAAM,MAAMQ,QAAO,SAAAC,GAAC,MAAiB,KAAbA,EAAEC,UAAeC,KAAI,SAAAF,GAAM,IAAD,EAClDA,EAAET,MAAM,IAAK,GADqC,mBAEvE,MAAO,CAAEZ,IAF8D,KAEpDF,MAFoD,SAO3E,OAFA0B,QAAQrB,IAAIO,GAGR,8BACKA,EAAMa,KAAI,SAACf,EAAMQ,GAAP,OACP,gCACI,iCAASR,EAAKR,MADlB,KACkCQ,EAAKV,MAAM,+B,uDCZ9C2B,E,8EAAf,WAA0BnE,GAA1B,eAAAoE,EAAA,sEAC2BC,MAAMrE,EAAK,CAACsE,KAAM,SAD7C,UACUC,EADV,OAEIL,QAAQrB,IAAI0B,GACPA,EAASC,GAHlB,sBAIc,IAAIC,MAAJ,mCAAsCzE,EAAtC,aAA8CuE,EAASG,SAJrE,uBAMiBH,EAASI,OAN1B,oF,kEASA,WAA6B3E,GAA7B,eAAAoE,EAAA,sEACuBD,EAAWnE,GADlC,cACU2E,EADV,gBAEiBC,IAAMC,UAAUF,GAFjC,oF,kEAKA,WAA4BG,EAAKC,GAAjC,SAAAX,EAAA,sEACiBU,EAAIE,KAAKD,GAD1B,4CACwC,OADxC,kD,kEAIA,WAA+BD,EAAKC,EAAUE,GAA9C,SAAAb,EAAA,6DACIa,EAASA,GAAU,cADvB,SAEiBH,EAAIE,KAAKD,GAAUG,MAAMD,GAF1C,oF,sBAKA,IAOeE,EAPD,CACVhB,WAAYA,EACZiB,c,4CACAC,a,8CACAC,gB,iDCdE3F,EAAYC,aAAW,SAAAC,GAAK,MAAK,MAWxB,SAAS0F,EAAW3D,GAC/B,IAAMC,EAAUlC,IADsB,EAGRmC,oBAAS,GAHD,mBAG/B0D,EAH+B,KAGtBC,EAHsB,OAIA3D,oBAAS,GAJT,mBAI/B4D,EAJ+B,KAIlBC,EAJkB,OAMF7D,mBAAS,IANP,mBAM/B8D,EAN+B,KAMnBC,EANmB,OAOd/D,mBAAS,IAPK,mBAO/BgE,EAP+B,KAOzBC,EAPyB,KAStCC,qBAAU,WACR,GAAIpE,EAAM5B,IAAK,CACb,IAAMA,EAnBd,SAAqBA,GAEjB,OAAIA,EAAIiG,MADY,mEAETjG,EAAIkG,QAAQ,qBAAsB,8CAEtClG,EAcSmG,CAAYvE,EAAM5B,KAE9BoG,EAAShB,cAAcpF,GACpBqG,MAAK,SAAAvB,GACJ,IAAMwB,EAAQ,CAAC,gBAAiB,aAAc,eAAgB,oCAAqC,oCAEnGb,GAAW,GACXE,GAAe,GACfS,EAASd,gBAAgBR,EAAK,iBAAkB,UAAUuB,MAAK,SAAAhD,GAC7DwC,EAAcxC,GACdoC,GAAW,GAEX,IAAMc,EAAW,GACXC,EAAW,GAEjBF,EAAMG,SAAQ,SAAA1B,GACZ,IAAM2B,EAAUN,EAASd,gBAAgBR,EAAKC,EAAU,UACrDsB,MAAK,SAAAhD,GACJmD,EAASzB,GAAY1B,KAEzBkD,EAASI,KAAKD,MAGhBE,QAAQC,WAAWN,GAChBF,MAAK,WACJ,IAAMS,EAAS,GACfR,EAAMG,SAAQ,SAAA1B,GACRyB,EAASzB,IACX+B,EAAOH,KAAK,CAAE9D,IAAKkC,EAAU1B,QAASmD,EAASzB,QAGnDgB,EAAQe,GACRnB,GAAe,YAKtBoB,OAAM,kBAIV,CAACnF,EAAM5B,MAEV,IAAMgH,EAAkB,WACpB,OAAIxB,EAEI,qBAAK7B,MAAO,CAAE3C,QAAS,OAAQE,eAAgB,UAA/C,SACI,cAAC+F,EAAA,EAAD,MAKJ,eAACC,EAAA,EAAD,CAAWC,iBAAe,EAA1B,UACI,cAACC,EAAA,EAAD,CAAkBC,WAAY,cAAC,IAAD,IAAoBC,gBAAc,wBAAwBC,GAAG,uBAA3F,SACA,cAACC,EAAA,EAAD,CAAYxF,UAAWH,EAAQ4F,QAA/B,kCAEA,cAACC,EAAA,EAAD,UACA,cAAC9D,EAAD,CAAYC,KAAM+B,UAO5B+B,EAAW,WACb,OAAInC,EACQ,KACDE,EAEH,qBAAK/B,MAAO,CAAE3C,QAAS,OAAQE,eAAgB,UAA/C,SACI,cAAC+F,EAAA,EAAD,MAKJ,8BACKnB,EAAK7B,KAAI,SAACpB,EAAKa,GAAN,OACN,eAACwD,EAAA,EAAD,WACA,cAACE,EAAA,EAAD,CAAkBC,WAAY,cAAC,IAAD,IAAoBC,gBAAe,aAAe5D,EAAQ,WAAY6D,GAAI,aAAe7D,EAAQ,UAA/H,SACI,cAAC8D,EAAA,EAAD,CAAYxF,UAAWH,EAAQ4F,QAA/B,SAAyC5E,EAAIA,QAEjD,cAAC6E,EAAA,EAAD,UACI,cAACvE,EAAD,CAASN,IAAKA,EAAIA,IAAKQ,QAASR,EAAIQ,QAASuE,SAAS,qBAS9E,OACE,gCACI,cAACZ,EAAD,IACA,cAACW,EAAD,OC/HK,SAASE,IACpB,OACI,cAACL,EAAA,EAAD,CAAY7D,MAAO,CAAE3C,QAAS,OAAQE,eAAgB,UAAtD,wDCUR,IAAMvB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCsC,KAAM,CACFnB,QAAS,OACT8B,SAAU,QAEdhD,KAAM,CACJC,SAAU,GAEZ+H,OAAQjI,EAAMkI,OAAOC,QACrB3E,QAAS,CACPtD,SAAU,EACVe,OAAO,gBAAD,OAAkBjB,EAAMkI,OAAOC,QAA/B,OACNlF,SAAU,QAEZmF,UAAW,CACTC,WAAYrI,EAAMa,QAAQ,GAC1ByH,cAAetI,EAAMa,QAAQ,QAIpB,SAAS0H,EAAIxG,GACxB,IAAMyG,EAAkBC,YAAc,gCADP,EAECxG,mBAASuG,GAFV,mBAExBE,EAFwB,KAEdC,EAFc,OAGT1G,mBAASF,EAAM5B,KAHN,mBAGxBA,EAHwB,KAGnB+B,EAHmB,KAKzB0G,EAASF,EAAW,OAAS,QAC7BG,EAAgBC,YAAe,CACjCrI,QAAS,CACLsI,KAAMH,KAYR5G,EAAUlC,IAEVkJ,EAAW,WACf,OAAI7I,EAEA,cAACuF,EAAD,CAAYvF,IAAKA,IAIjB,cAAC6H,EAAD,KAKN,OACI,cAACiB,EAAA,EAAD,CAAejJ,MAAO6I,EAAtB,SACI,sBAAK1G,UAAWH,EAAQM,KAAxB,UACI,cAAC4G,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAQ/I,SAAS,QAAQ+B,UAAWH,EAAQoH,OAA5C,SACI,eAACC,EAAA,EAAD,WACI,cAAC1B,EAAA,EAAD,CAAY2B,QAAQ,KAAKC,QAAM,EAA/B,qCAGA,cAACzH,EAAD,CAAQ3B,IAAKA,EAAK2C,gBA5Bd,SAAC0G,GACvBtH,EAAOsH,MA4BW,cAACC,EAAA,EAAD,CAAQC,QAAShB,EAAUlG,SAjCrB,WACtBmG,GAAaD,WAoCL,uBAAMvG,UAAWH,EAAQwB,QAAzB,UACI,qBAAKrB,UAAWH,EAAQiG,SACxB,cAAC0B,EAAA,EAAD,CAAWC,SAAS,KAAKzH,UAAWH,EAAQoG,UAA5C,SACE,cAACY,EAAD,cCpFtB,IAAMa,EAASC,OAAOC,SAASF,OAKzB1J,EAJS,IAAI6J,gBAAgBH,GAIhBI,IAAI,MAAO,IAE9B5F,QAAQrB,IAAI,MAAO7C,GAEnB+J,IAASC,OACP,cAAC5B,EAAD,CAAKpI,IAAa,MAAPA,EAAe,GAAKA,IAC/BiK,SAASC,cAAc,Y","file":"static/js/main.22d12786.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\n\nimport InputBase from \"@material-ui/core/InputBase\";\nimport LinkIcon from \"@material-ui/icons/LinkOutlined\";\n\n\nconst useStyles = makeStyles(theme => ({\n    grow: {\n      flexGrow: 1\n    },\n    url: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n      flexGrow: 1\n    },\n    urlIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\",\n      width: \"100%\"\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: \"100%\",\n    }\n}));\n\n\nexport default function UrlBar(props) {\n    const classes = useStyles();\n\n    const [url, setUrl] = useState(props.url);\n\n    const handleChange = (event) => {\n        setUrl(event.target.value);\n    }\n\n    const handleKeyDown = (event) => {\n        if (event.key === \"Enter\") {\n            props.handleUrlChange(url);\n        }\n    }\n\n    return (\n        <div className={classes.url}>\n        <div className={classes.urlIcon}>\n          <LinkIcon />\n        </div>\n        <InputBase\n          placeholder=\"URL...\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput,\n          }}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown} \n          defaultValue={props.url}\n        />\n      </div>\n\n    )\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FixedSizeList } from \"react-window\";\n\nconst useStyles = makeStyles(theme => ({\n    log: {\n        flexGrow: 1,\n        overflow: \"auto\",\n        padding: 0,\n        \"font-family\": \"'JetBrains Mono', 'Droid Sans Mono', monospace\",\n    },\n    linenumber: {\n        display: \"inline-block\",\n        width: \"5em\",\n        \"text-align\": \"right\",\n        \"margin-right\": \"1em\",\n        \"color\": theme.palette.text.secondary\n    },\n    line: {\n\n    }\n}));\n\nexport default function LogView(props) {\n    const classes = useStyles();\n\n    const lines = props.content.split(\"\\n\");\n\n    const Line = ({ index, style }) => (\n        <span style={style}><span className={classes.linenumber}>{index+1}</span><span className={classes.line}>{lines[index]}</span></span>\n    )\n\n    return (\n        <code className={classes.log}>\n            <pre>\n                <FixedSizeList \n                    height={500}\n                    itemCount={lines.length}\n                    itemSize={20}\n                >\n                    {Line}\n                </FixedSizeList>\n            </pre>\n        </code>\n    )\n}","import React from \"react\";\n\nexport default function SystemInfo(props) {\n    const lines = props.info.split(\"\\n\").filter(l => l.trim() !== \"\").map(l => {\n        const [key, value] = l.split(\":\", 2);\n        return { key: key, value: value }\n    });\n\n    console.log(lines);\n\n    return (\n        <div>\n            {lines.map((line, index) => (\n                <div>\n                    <strong>{line.key}</strong>: {line.value}<br />\n                </div>\n            ))}\n        </div>\n    )\n}","import JSZip from \"jszip\";\n\nasync function loadRemote(url) {\n    const response = await fetch(url, {mode: 'cors',});\n    console.log(response);\n    if (!response.ok) {\n        throw new Error(`Could not load file from ${url}: ${response.status}`);\n    }\n    return await response.blob();\n}\n\nasync function loadRemoteZip(url) {\n    const blob = await loadRemote(url);\n    return await JSZip.loadAsync(blob);\n}\n\nasync function containsFile(zip, filename) {\n    return await zip.file(filename) !== null;\n}\n\nasync function getFileContents(zip, filename, format) {\n    format = format || \"arraybuffer\";\n    return await zip.file(filename).async(format);\n}\n\nconst utils = {\n    loadRemote: loadRemote,\n    loadRemoteZip: loadRemoteZip,\n    containsFile: containsFile,\n    getFileContents: getFileContents\n}\n\nexport default utils;","import React, { useState, useEffect } from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport LogView from \"./LogView\";\nimport SystemInfo from \"./SystemInfo\";\n\nimport ziputils from \"../util/zip\";\n\nconst useStyles = makeStyles(theme => ({\n}));\n\nfunction corsRewrite(url) {\n    const githubRegex = /^https:\\/\\/github\\.com\\/[a-zA-Z0-9_-]+\\/[a-zA-Z0-9_-]+\\/files\\//\n    if (url.match(githubRegex)) {\n        return url.replace(\"https://github.com\", \"https://bundleviewer.octoprint.org/bundles\");\n    }\n    return url;\n}\n\nexport default function BundleView(props) {\n    const classes = useStyles();\n\n    const [loading, setLoading] = useState(true);\n    const [logsLoading, setLogsLoading] = useState(true);\n\n    const [systemInfo, setSystemInfo] = useState(\"\");\n    const [logs, setLogs] = useState([]);\n\n    useEffect(() => {\n      if (props.url) {\n        const url = corsRewrite(props.url);\n        \n        ziputils.loadRemoteZip(url)\n          .then(zip => {\n            const files = [\"octoprint.log\", \"serial.log\", \"terminal.txt\", \"plugin_softwareupdate_console.log\", \"plugin_pluginmanager_console.log\"];\n\n            setLoading(true);\n            setLogsLoading(true);\n            ziputils.getFileContents(zip, \"systeminfo.txt\", \"string\").then(content => {\n              setSystemInfo(content);\n              setLoading(false);\n\n              const promises = [];\n              const contents = {};\n  \n              files.forEach(filename => {\n                const promise = ziputils.getFileContents(zip, filename, \"string\")\n                  .then(content => {\n                    contents[filename] = content;\n                  });\n                promises.push(promise);\n              })\n  \n              Promise.allSettled(promises)\n                .then(() => {\n                  const result = [];\n                  files.forEach(filename => {\n                    if (contents[filename]) {\n                      result.push({ log: filename, content: contents[filename] });\n                    }\n                  });\n                  setLogs(result);\n                  setLogsLoading(false);\n                })\n            });\n\n          })\n          .catch(() => {\n            // error, ignore\n          });\n      }\n    }, [props.url]);\n\n    const SystemInfoBlock = () => {\n        if (loading) {\n            return (\n                <div style={{ display: \"flex\", justifyContent: \"center\", }}>\n                    <CircularProgress />\n                </div>\n            )\n        } else {\n            return (\n                <Accordion defaultExpanded>\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel-sysinfo-content\" id=\"panel-sysinfo-header\">\n                    <Typography className={classes.heading}>System Information</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                    <SystemInfo info={systemInfo} />\n                    </AccordionDetails>\n                </Accordion>\n            )\n        }\n    }\n\n    const LogBlock = () => {\n        if (loading) {\n            return (null)\n        } else if (logsLoading) {\n            return (\n                <div style={{ display: \"flex\", justifyContent: \"center\", }}>\n                    <CircularProgress />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    {logs.map((log, index) => (\n                        <Accordion>\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls={\"panel-log-\" + index + \"-content\"} id={\"panel-log-\" + index + \"-header\"}>\n                            <Typography className={classes.heading}>{log.log}</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <LogView log={log.log} content={log.content} language=\"plain\" />\n                        </AccordionDetails>\n                        </Accordion>\n                    ))}\n                </div>\n            )\n        }\n    }\n\n    return (\n      <div>\n          <SystemInfoBlock />\n          <LogBlock />\n      </div>\n    )\n}","import React from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function NothingLoaded() {\n    return (\n        <Typography style={{ display: \"flex\", justifyContent: \"center\" }}>\n            Please enter a bundle URL and press Enter.\n        </Typography>\n    )\n}","import React, { useState } from \"react\";\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport Switch from \"@material-ui/core/Switch\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport UrlBar from \"./components/UrlBar\";\nimport BundleView from \"./components/BundleView\";\nimport NothingLoaded from \"./components/NothingLoaded\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\",\n        overflow: \"auto\"\n    },\n    grow: {\n      flexGrow: 1\n    },\n    offset: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: `calc(100vh + ${theme.mixins.toolbar}px)`,\n      overflow: \"auto\"\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4)\n    },\n}));\n\nexport default function App(props) {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [darkMode, setDarkMode] = useState(prefersDarkMode);\n    const [url, setUrl] = useState(props.url);\n\n    const pallet = darkMode ? \"dark\" : \"light\";\n    const darkModeTheme = createMuiTheme({\n        palette: {\n            type: pallet\n        }\n    });\n\n    const handleThemeToggle = () => {\n        setDarkMode(!darkMode);\n    }\n\n    const handleUrlChange = (newUrl) => {\n      setUrl(newUrl);\n    }\n\n    const classes = useStyles();\n\n    const MainView = () => {\n      if (url) {\n        return (\n          <BundleView url={url} />\n        )\n      } else {\n        return (\n          <NothingLoaded />\n        )\n      }\n    }\n\n    return (\n        <ThemeProvider theme={darkModeTheme}>\n            <div className={classes.root}>\n                <CssBaseline />\n\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" noWrap>\n                            OctoPrint Bundle Viewer\n                        </Typography>\n                        <UrlBar url={url} handleUrlChange={handleUrlChange} />\n                        <Switch checked={darkMode} onChange={handleThemeToggle} />\n                    </Toolbar>\n                </AppBar>\n\n                <main className={classes.content}>\n                    <div className={classes.offset} />\n                    <Container maxWidth=\"lg\" className={classes.container}>\n                      <MainView />\n                    </Container>\n                </main>\n            </div>\n        </ThemeProvider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst search = window.location.search;\nconst params = new URLSearchParams(search);\n\n//const url = \"http://localhost:8000/octoprint-systeminfo-20210119184038.zip\";\n//const url = \"https://github.com/foosel/testing-stuff/files/5837673/octoprint-systeminfo-20210119184038.zip\";\nconst url = params.get('url', '');\n\nconsole.log(\"URL\", url);\n\nReactDOM.render(\n  <App url={(url == null) ? \"\" : url} />,\n  document.querySelector('#root'),\n);"],"sourceRoot":""}